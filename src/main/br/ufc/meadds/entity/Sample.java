package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.validator.NotNull;

// TODO: Auto-generated Javadoc
/**
 * Sample generated by hbm2java.
 */
@Entity
@Table(name = "sample")
public class Sample implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 9164205827569677583L;

	/** The id. */
	private Long id;

	/** The algorithm. */
	private Algorithm algorithm;

	/** The device. */
	private Device device;

	/** The user. */
	private User user;

	/** The sample date. */
	private Date sampleDate;

	/** The text size. */
	private Integer textSize;

	/** The encrypt time. */
	private Long encryptTime;

	/** The decrypt time. */
	private Long decryptTime;

	/** The encryption memory. */
	private Integer encryptionMemory;

	/** The decryption memory. */
	private Integer decryptionMemory;

	/**
	 * Instantiates a new sample.
	 */
	public Sample() {
	}

	/**
	 * Instantiates a new sample.
	 * 
	 * @param algorithm
	 *            the algorithm
	 * @param device
	 *            the device
	 * @param user
	 *            the user
	 * @param sampleDate
	 *            the sample date
	 * @param textSize
	 *            the text size
	 * @param encryptTime
	 *            the encrypt time
	 * @param decryptTime
	 *            the decrypt time
	 * @param memoryToEncrypt
	 *            the memory to encrypt
	 * @param memoryToDecrypt
	 *            the memory to decrypt
	 */
	public Sample(Algorithm algorithm, Device device, User user,
			Date sampleDate, Integer textSize, Long encryptTime,
			Long decryptTime, Integer memoryToEncrypt, Integer memoryToDecrypt) {
		this.algorithm = algorithm;
		this.device = device;
		this.user = user;
		this.sampleDate = sampleDate;
		this.textSize = textSize;
		this.encryptTime = encryptTime;
		this.decryptTime = decryptTime;
		this.encryptionMemory = memoryToEncrypt;
		this.decryptionMemory = memoryToDecrypt;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the algorithm.
	 * 
	 * @return the algorithm
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "algorithm_id", nullable = false)
	@NotNull
	public Algorithm getAlgorithm() {
		return this.algorithm;
	}

	/**
	 * Sets the algorithm.
	 * 
	 * @param algorithm
	 *            the new algorithm
	 */
	public void setAlgorithm(Algorithm algorithm) {
		this.algorithm = algorithm;
	}

	/**
	 * Gets the device.
	 * 
	 * @return the device
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "device_id", nullable = false)
	@NotNull
	public Device getDevice() {
		return this.device;
	}

	/**
	 * Sets the device.
	 * 
	 * @param device
	 *            the new device
	 */
	public void setDevice(Device device) {
		this.device = device;
	}

	/**
	 * Gets the user.
	 * 
	 * @return the user
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	@NotNull
	public User getUser() {
		return this.user;
	}

	/**
	 * Sets the user.
	 * 
	 * @param user
	 *            the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * Gets the sample date.
	 * 
	 * @return the sample date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "sample_date", nullable = false, length = 19)
	@NotNull
	public Date getSampleDate() {
		return this.sampleDate;
	}

	/**
	 * Sets the sample date.
	 * 
	 * @param sampleDate
	 *            the new sample date
	 */
	public void setSampleDate(Date sampleDate) {
		this.sampleDate = sampleDate;
	}

	/**
	 * Gets the text size.
	 * 
	 * @return the text size
	 */
	@Column(name = "text_size", nullable = false)
	public Integer getTextSize() {
		return this.textSize;
	}

	/**
	 * Sets the text size.
	 * 
	 * @param textSize
	 *            the new text size
	 */
	public void setTextSize(Integer textSize) {
		this.textSize = textSize;
	}

	/**
	 * Gets the encrypt time.
	 * 
	 * @return the encrypt time
	 */
	@Column(name = "encrypt_time", nullable = false)
	@NotNull
	public Long getEncryptTime() {
		return this.encryptTime;
	}

	/**
	 * Sets the encrypt time.
	 * 
	 * @param encryptTime
	 *            the new encrypt time
	 */
	public void setEncryptTime(Long encryptTime) {
		this.encryptTime = encryptTime;
	}

	/**
	 * Gets the decrypt time.
	 * 
	 * @return the decrypt time
	 */
	@Column(name = "decrypt_time", nullable = false)
	@NotNull
	public Long getDecryptTime() {
		return this.decryptTime;
	}

	/**
	 * Sets the decrypt time.
	 * 
	 * @param decryptTime
	 *            the new decrypt time
	 */
	public void setDecryptTime(Long decryptTime) {
		this.decryptTime = decryptTime;
	}

	/**
	 * Gets the encryption memory.
	 * 
	 * @return the encryption memory
	 */
	@Column(name = "encryption_memory", nullable = false)
	public Integer getEncryptionMemory() {
		return this.encryptionMemory;
	}

	/**
	 * Sets the encryption memory.
	 * 
	 * @param memoryToEncrypt
	 *            the new encryption memory
	 */
	public void setEncryptionMemory(Integer memoryToEncrypt) {
		this.encryptionMemory = memoryToEncrypt;
	}

	/**
	 * Gets the decryption memory.
	 * 
	 * @return the decryption memory
	 */
	@Column(name = "decryption_memory", nullable = false)
	public Integer getDecryptionMemory() {
		return this.decryptionMemory;
	}

	/**
	 * Sets the decryption memory.
	 * 
	 * @param memoryToDecrypt
	 *            the new decryption memory
	 */
	public void setDecryptionMemory(Integer memoryToDecrypt) {
		this.decryptionMemory = memoryToDecrypt;
	}

}
