package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.CascadeType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

// TODO: Auto-generated Javadoc
/**
 * Sampleprofile generated by hbm2java.
 */
@Entity
@Table(name = "sample_profile", uniqueConstraints = { @UniqueConstraint(columnNames = {
		"name", "user_id", "library_id" }) })
public class SampleProfile implements java.io.Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -5179719710051317012L;

	/** The id. */
	private Long id;

	/** The library. */
	private Library library;

	/** The user. */
	private User user;

	/** The name. */
	private String name;

	/** The sample profiles. */
	private Set<AlgorithmSampleProfile> sampleProfiles = new HashSet<AlgorithmSampleProfile>(
			0);

	/**
	 * Instantiates a new sample profile.
	 */
	public SampleProfile() {
	}

	/**
	 * Instantiates a new sample profile.
	 * 
	 * @param library
	 *            the library
	 * @param user
	 *            the user
	 * @param name
	 *            the name
	 */
	public SampleProfile(Library library, User user, String name) {
		this.library = library;
		this.user = user;
		this.name = name;
	}

	/**
	 * Instantiates a new sample profile.
	 * 
	 * @param library
	 *            the library
	 * @param user
	 *            the user
	 * @param name
	 *            the name
	 * @param algsampleprofiles
	 *            the algsampleprofiles
	 */
	public SampleProfile(Library library, User user, String name,
			Set<AlgorithmSampleProfile> algsampleprofiles) {
		this.library = library;
		this.user = user;
		this.name = name;
		this.sampleProfiles = algsampleprofiles;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the library.
	 * 
	 * @return the library
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "library_id", nullable = false)
	@NotNull
	public Library getLibrary() {
		return this.library;
	}

	/**
	 * Sets the library.
	 * 
	 * @param library
	 *            the new library
	 */
	public void setLibrary(Library library) {
		this.library = library;
	}

	/**
	 * Gets the user.
	 * 
	 * @return the user
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", unique = true, nullable = false)
	@NotNull
	public User getUser() {
		return this.user;
	}

	/**
	 * Sets the user.
	 * 
	 * @param user
	 *            the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	@Column(name = "name", unique = true, nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 * 
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the sample profiles.
	 * 
	 * @return the sample profiles
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "sampleProfile", cascade = CascadeType.ALL)
	public Set<AlgorithmSampleProfile> getSampleProfiles() {
		return this.sampleProfiles;
	}

	/**
	 * Sets the sample profiles.
	 * 
	 * @param algsampleprofiles
	 *            the new sample profiles
	 */
	public void setSampleProfiles(Set<AlgorithmSampleProfile> algsampleprofiles) {
		this.sampleProfiles = algsampleprofiles;
	}

	/**
	 * Adds a new algorithm to the sample profile.
	 * 
	 * @param algorithm
	 *            to be added.
	 */
	public void addAlgorithmSampleProfile(AlgorithmSampleProfile algorithm) {
		if (this.sampleProfiles == null) {
			this.sampleProfiles = new HashSet<AlgorithmSampleProfile>();
		}
		this.sampleProfiles.add(algorithm);
	}

}
