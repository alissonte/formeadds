package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Type;
import org.hibernate.validator.Email;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.hibernate.validator.Pattern;
import org.jboss.seam.annotations.security.management.UserPassword;
import org.jboss.seam.annotations.security.management.UserPrincipal;
import org.jboss.seam.annotations.security.management.UserRoles;

// TODO: Auto-generated Javadoc
/**
 * User generated by hbm2java.
 */
@Entity
@Table(name = "user", uniqueConstraints = {
		@UniqueConstraint(columnNames = "login"),
		@UniqueConstraint(columnNames = "cpf") })
public class User implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -3605584403429862829L;

	/** The id. */
	private Long id;

	/** The name. */
	private String name;

	/** The login name. */
	private String login;

	/** The password. */
	private String password;

	/** The email. */
	private String email;

	/** The cpf. */
	private String cpf;

	/** The active. */
	private Boolean active = Boolean.valueOf(false);

	/** The applications. */
	private Set<Application> applications = new HashSet<Application>(0);

	/** The sampleconsumptions. */
	private Set<SampleConsumption> sampleconsumptions = new HashSet<SampleConsumption>(
			0);

	/** The useradmins. */
	private List<Role> roles = new LinkedList<Role>();

	/** The devices. */
	private Set<Device> devices = new HashSet<Device>(0);

	/** The sampleprofiles. */
	private Set<SampleProfile> sampleprofiles = new HashSet<SampleProfile>(0);

	/** The samples. */
	private Set<Sample> samples = new HashSet<Sample>(0);

	/** The algorithmconfidentialitydegrees. */
	private Set<AlgorithmConfidentialityDegree> algorithmconfidentialitydegrees = new HashSet<AlgorithmConfidentialityDegree>(
			0);

	private Set<Library> libraries = new HashSet<Library>(0);

	/**
	 * Instantiates a new user.
	 */
	public User() {
	}

	/**
	 * Instantiates a new user.
	 * 
	 * @param name
	 *            the name
	 * @param loginName
	 *            the login name
	 * @param password
	 *            the password
	 * @param email
	 *            the email
	 * @param cpf
	 *            the cpf
	 */
	public User(String name, String loginName, String password, String email,
			String cpf) {
		this.name = name;
		this.login = loginName;
		this.password = password;
		this.email = email;
		this.cpf = cpf;
	}

	/**
	 * Instantiates a new user.
	 * 
	 * @param name
	 *            the name
	 * @param loginName
	 *            the login name
	 * @param password
	 *            the password
	 * @param email
	 *            the email
	 * @param cpf
	 *            the cpf
	 * @param applications
	 *            the applications
	 * @param sampleconsumptions
	 *            the sampleconsumptions
	 * @param useradmins
	 *            the useradmins
	 * @param devices
	 *            the devices
	 * @param sampleprofiles
	 *            the sampleprofiles
	 * @param samples
	 *            the samples
	 * @param algorithmconfidentialitydegrees
	 *            the algorithmconfidentialitydegrees
	 */
	public User(String name, String loginName, String password, String email,
			String cpf, Set<Application> applications,
			Set<SampleConsumption> sampleconsumptions, List<Role> useradmins,
			Set<Device> devices, Set<SampleProfile> sampleprofiles,
			Set<Sample> samples,
			Set<AlgorithmConfidentialityDegree> algorithmconfidentialitydegrees) {
		this.name = name;
		this.login = loginName;
		this.password = password;
		this.email = email;
		this.cpf = cpf;
		this.applications = applications;
		this.sampleconsumptions = sampleconsumptions;
		this.roles = useradmins;
		this.devices = devices;
		this.sampleprofiles = sampleprofiles;
		this.samples = samples;
		this.algorithmconfidentialitydegrees = algorithmconfidentialitydegrees;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	@Column(name = "name", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 * 
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the login.
	 * 
	 * @return the login
	 */
	@UserPrincipal
	@Column(name = "login", unique = true, nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getLogin() {
		return this.login;
	}

	/**
	 * Sets the login name.
	 * 
	 * @param login
	 *            the new login name
	 */
	public void setLogin(String login) {
		this.login = login;
	}

	/**
	 * Gets the password.
	 * 
	 * @return the password
	 */
	@UserPassword(hash = "md5")
	@Column(name = "password", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getPassword() {
		return this.password;
	}

	/**
	 * Sets the password.
	 * 
	 * @param password
	 *            the new password
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "active", nullable = false)
	@NotNull
	@Type(type = "yes_no")
	/**
	 * @return the active
	 */
	public Boolean getActive() {
		return active;
	}

	/**
	 * @param active
	 *            the active to set
	 */
	public void setActive(Boolean active) {
		this.active = active;
	}

	/**
	 * Gets the email.
	 * 
	 * @return the email
	 */
	@Column(name = "email", nullable = false, length = 128)
	@NotNull
	@Length(max = 128)
	@Email
	public String getEmail() {
		return this.email;
	}

	/**
	 * Sets the email.
	 * 
	 * @param email
	 *            the new email
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Gets the cpf.
	 * 
	 * @return the cpf
	 */
	@Column(name = "cpf", nullable = false)
	@Pattern(regex = "(^(\\d{3}.\\d{3}.\\d{3}-\\d{2})|(\\d{11})$)", message = "CPF inv√°lido.")
	public String getCpf() {
		return this.cpf;
	}

	/**
	 * Sets the cpf.
	 * 
	 * @param cpf
	 *            the new cpf
	 */
	public void setCpf(String cpf) {
		this.cpf = cpf;
	}

	/**
	 * Gets the applications.
	 * 
	 * @return the applications
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Application> getApplications() {
		return this.applications;
	}

	/**
	 * Sets the applications.
	 * 
	 * @param applications
	 *            the new applications
	 */
	public void setApplications(Set<Application> applications) {
		this.applications = applications;
	}

	/**
	 * Gets the sampleconsumptions.
	 * 
	 * @return the sampleconsumptions
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<SampleConsumption> getSampleconsumptions() {
		return this.sampleconsumptions;
	}

	/**
	 * Sets the sampleconsumptions.
	 * 
	 * @param sampleconsumptions
	 *            the new sampleconsumptions
	 */
	public void setSampleconsumptions(Set<SampleConsumption> sampleconsumptions) {
		this.sampleconsumptions = sampleconsumptions;
	}

	/**
	 * Gets the useradmins.
	 * 
	 * @return the useradmins
	 */
	@UserRoles
	@ManyToMany(targetEntity = Role.class)
	@JoinTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
	public List<Role> getRoles() {
		return this.roles;
	}

	/**
	 * Sets the useradmins.
	 * 
	 * @param useradmins
	 *            the new useradmins
	 */
	public void setRoles(List<Role> useradmins) {
		this.roles = useradmins;
	}

	/**
	 * Gets the devices.
	 * 
	 * @return the devices
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Device> getDevices() {
		return this.devices;
	}

	/**
	 * Sets the devices.
	 * 
	 * @param devices
	 *            the new devices
	 */
	public void setDevices(Set<Device> devices) {
		this.devices = devices;
	}

	/**
	 * Gets the sampleprofiles.
	 * 
	 * @return the sampleprofiles
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<SampleProfile> getSampleprofiles() {
		return this.sampleprofiles;
	}

	/**
	 * Sets the sampleprofiles.
	 * 
	 * @param sampleprofiles
	 *            the new sampleprofiles
	 */
	public void setSampleprofiles(Set<SampleProfile> sampleprofiles) {
		this.sampleprofiles = sampleprofiles;
	}

	/**
	 * Gets the samples.
	 * 
	 * @return the samples
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Sample> getSamples() {
		return this.samples;
	}

	/**
	 * Sets the samples.
	 * 
	 * @param samples
	 *            the new samples
	 */
	public void setSamples(Set<Sample> samples) {
		this.samples = samples;
	}

	/**
	 * Gets the algorithmconfidentialitydegrees.
	 * 
	 * @return the algorithmconfidentialitydegrees
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<AlgorithmConfidentialityDegree> getAlgorithmconfidentialitydegrees() {
		return this.algorithmconfidentialitydegrees;
	}

	/**
	 * Sets the algorithmconfidentialitydegrees.
	 * 
	 * @param algorithmconfidentialitydegrees
	 *            the new algorithmconfidentialitydegrees
	 */
	public void setAlgorithmconfidentialitydegrees(
			Set<AlgorithmConfidentialityDegree> algorithmconfidentialitydegrees) {
		this.algorithmconfidentialitydegrees = algorithmconfidentialitydegrees;
	}

	/**
	 * @return the libraries
	 */
	@ManyToMany(targetEntity = Library.class, mappedBy = "users")
	public Set<Library> getLibraries() {
		return libraries;
	}

	/**
	 * @param libraries
	 *            the libraries to set
	 */
	public void setLibraries(Set<Library> libraries) {
		this.libraries = libraries;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cpf == null) ? 0 : cpf.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((login == null) ? 0 : login.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (cpf == null) {
			if (other.cpf != null)
				return false;
		} else if (!cpf.equals(other.cpf))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (login == null) {
			if (other.login != null)
				return false;
		} else if (!login.equals(other.login))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

}
