package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.validator.NotNull;

// TODO: Auto-generated Javadoc
/**
 * Algsampleprofile generated by hbm2java.
 */
@Entity
@Table(name = "algorithm_sample_profile", uniqueConstraints = @UniqueConstraint(columnNames = {
		"algorithm_id", "sample_profile_id" }))
public class AlgorithmSampleProfile implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 3221270788317416504L;

	/** The id. */
	private Long id;

	/** The algorithm. */
	private Algorithm algorithm;

	/** The sampleprofile. */
	private SampleProfile sampleProfile;

	/** The samples text size. */
	private Integer samplesTextSize;

	/** The average runtime. */
	private Long averageRuntime;

	/** The average encrypt time. */
	private Long averageEncryptTime;

	/** The average decrypt time. */
	private Long averageDecryptTime;

	/** The average consumption. */
	private Float averageConsumption;

	/** The average memory required. */
	private Integer averageMemoryRequired;

	/**
	 * Instantiates a new algorithm sample profile.
	 */
	public AlgorithmSampleProfile() {
	}

	/**
	 * Instantiates a new algorithm sample profile.
	 * 
	 * @param id
	 *            the id
	 * @param algorithm
	 *            the algorithm
	 * @param sampleprofile
	 *            the sampleprofile
	 * @param samplesTextSize
	 *            the samples text size
	 * @param averageRuntime
	 *            the average runtime
	 * @param averageEncryptTime
	 *            the average encrypt time
	 * @param averageDecryptTime
	 *            the average decrypt time
	 * @param averageConsumption
	 *            the average consumption
	 * @param averageMemoryRequired
	 *            the average memory required
	 */
	public AlgorithmSampleProfile(Long id, Algorithm algorithm,
			SampleProfile sampleprofile, Integer samplesTextSize,
			Long averageRuntime, Long averageEncryptTime,
			Long averageDecryptTime, Float averageConsumption,
			Integer averageMemoryRequired) {
		this.id = id;
		this.algorithm = algorithm;
		this.sampleProfile = sampleprofile;
		this.samplesTextSize = samplesTextSize;
		this.averageRuntime = averageRuntime;
		this.averageEncryptTime = averageEncryptTime;
		this.averageDecryptTime = averageDecryptTime;
		this.averageConsumption = averageConsumption;
		this.averageMemoryRequired = averageMemoryRequired;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the algorithm.
	 * 
	 * @return the algorithm
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "algorithm_id", nullable = false)
	@NotNull
	public Algorithm getAlgorithm() {
		return this.algorithm;
	}

	/**
	 * Sets the algorithm.
	 * 
	 * @param algorithm
	 *            the new algorithm
	 */
	public void setAlgorithm(Algorithm algorithm) {
		this.algorithm = algorithm;
	}

	/**
	 * Gets the sampleprofile.
	 * 
	 * @return the sampleprofile
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "sample_profile_id", nullable = false)
	@NotNull
	public SampleProfile getSampleProfile() {
		return this.sampleProfile;
	}

	/**
	 * Sets the sampleprofile.
	 * 
	 * @param sampleprofile
	 *            the new sampleprofile
	 */
	public void setSampleProfile(SampleProfile sampleprofile) {
		this.sampleProfile = sampleprofile;
	}

	/**
	 * Gets the samples text size.
	 * 
	 * @return the samples text size
	 */
	@Column(name = "samples_text_size", nullable = false)
	public Integer getSamplesTextSize() {
		return this.samplesTextSize;
	}

	/**
	 * Sets the samples text size.
	 * 
	 * @param samplesTextSize
	 *            the new samples text size
	 */
	public void setSamplesTextSize(Integer samplesTextSize) {
		this.samplesTextSize = samplesTextSize;
	}

	/**
	 * Gets the average runtime.
	 * 
	 * @return the average runtime
	 */
	@Column(name = "avg_runtime", nullable = false)
	@NotNull
	public Long getAverageRuntime() {
		return this.averageRuntime;
	}

	/**
	 * Sets the average runtime.
	 * 
	 * @param averageRuntime
	 *            the new average runtime
	 */
	public void setAverageRuntime(Long averageRuntime) {
		this.averageRuntime = averageRuntime;
	}

	/**
	 * Gets the average encrypt time.
	 * 
	 * @return the average encrypt time
	 */
	@Column(name = "avg_encrypt_time", nullable = false)
	@NotNull
	public Long getAverageEncryptTime() {
		return this.averageEncryptTime;
	}

	/**
	 * Sets the average encrypt time.
	 * 
	 * @param averageEncryptTime
	 *            the new average encrypt time
	 */
	public void setAverageEncryptTime(Long averageEncryptTime) {
		this.averageEncryptTime = averageEncryptTime;
	}

	/**
	 * Gets the average decrypt time.
	 * 
	 * @return the average decrypt time
	 */
	@Column(name = "avg_decrypt_time", nullable = false)
	@NotNull
	public Long getAverageDecryptTime() {
		return this.averageDecryptTime;
	}

	/**
	 * Sets the average decrypt time.
	 * 
	 * @param averageDecryptTime
	 *            the new average decrypt time
	 */
	public void setAverageDecryptTime(Long averageDecryptTime) {
		this.averageDecryptTime = averageDecryptTime;
	}

	/**
	 * Gets the average consumption.
	 * 
	 * @return the average consumption
	 */
	@Column(name = "avg_consumption", nullable = false, precision = 12, scale = 0)
	public Float getAverageConsumption() {
		return this.averageConsumption;
	}

	/**
	 * Sets the average consumption.
	 * 
	 * @param averageConsumption
	 *            the new average consumption
	 */
	public void setAverageConsumption(Float averageConsumption) {
		this.averageConsumption = averageConsumption;
	}

	/**
	 * Gets the average memory required.
	 * 
	 * @return the average memory required
	 */
	@Column(name = "avg_required_memory", nullable = false)
	public Integer getAverageMemoryRequired() {
		return this.averageMemoryRequired;
	}

	/**
	 * Sets the average memory required.
	 * 
	 * @param averageMemoryRequired
	 *            the new average memory required
	 */
	public void setAverageMemoryRequired(Integer averageMemoryRequired) {
		this.averageMemoryRequired = averageMemoryRequired;
	}

}
