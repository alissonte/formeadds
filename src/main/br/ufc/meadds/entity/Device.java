package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;

// TODO: Auto-generated Javadoc
/**
 * Device generated by hbm2java.
 */
@Entity
@Table(name = "device", uniqueConstraints = { @UniqueConstraint(columnNames = {
		"name", "user_id" }) })
public class Device implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -7773120273620607631L;

	/** The id. */
	private Long id;

	/** The user. */
	private User user;

	/** The name. */
	private String name;

	/** The manufaturer. */
	private String manufaturer;

	/** The virtual machine name. */
	private String virtualMachineName;

	/** The memory size. */
	private Integer memorySize;

	/** The processor frequency. */
	private Integer processorFrequency;

	/** The battery type. */
	private String batteryType;

	/** The additional info. */
	private String additionalInfo;

	/** The samples. */
	private Set<Sample> samples = new HashSet<Sample>(0);

	/** The sampleconsumptions. */
	private Set<SampleConsumption> sampleconsumptions = new HashSet<SampleConsumption>(
			0);

	/**
	 * Instantiates a new device.
	 */
	public Device() {
	}

	/**
	 * Instantiates a new device.
	 * 
	 * @param user
	 *            the user
	 * @param name
	 *            the name
	 * @param manufaturer
	 *            the manufaturer
	 * @param virtualMachineName
	 *            the virtual machine name
	 * @param memorySize
	 *            the memory size
	 * @param processorFrequency
	 *            the processor frequency
	 * @param batteryType
	 *            the battery type
	 */
	public Device(User user, String name, String manufaturer,
			String virtualMachineName, Integer memorySize,
			Integer processorFrequency, String batteryType) {
		this.user = user;
		this.name = name;
		this.manufaturer = manufaturer;
		this.virtualMachineName = virtualMachineName;
		this.memorySize = memorySize;
		this.processorFrequency = processorFrequency;
		this.batteryType = batteryType;
	}

	/**
	 * Instantiates a new device.
	 * 
	 * @param user
	 *            the user
	 * @param name
	 *            the name
	 * @param manufaturer
	 *            the manufaturer
	 * @param virtualMachineName
	 *            the virtual machine name
	 * @param memorySize
	 *            the memory size
	 * @param processorFrequency
	 *            the processor frequency
	 * @param batteryType
	 *            the battery type
	 * @param additionalInfo
	 *            the additional info
	 * @param samples
	 *            the samples
	 * @param sampleconsumptions
	 *            the sampleconsumptions
	 */
	public Device(User user, String name, String manufaturer,
			String virtualMachineName, Integer memorySize,
			Integer processorFrequency, String batteryType,
			String additionalInfo, Set<Sample> samples,
			Set<SampleConsumption> sampleconsumptions) {
		this.user = user;
		this.name = name;
		this.manufaturer = manufaturer;
		this.virtualMachineName = virtualMachineName;
		this.memorySize = memorySize;
		this.processorFrequency = processorFrequency;
		this.batteryType = batteryType;
		this.additionalInfo = additionalInfo;
		this.samples = samples;
		this.sampleconsumptions = sampleconsumptions;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param idDevice
	 *            the new id
	 */
	public void setId(Long idDevice) {
		this.id = idDevice;
	}

	/**
	 * Gets the user.
	 * 
	 * @return the user
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", unique = true, nullable = false)
	@NotNull
	public User getUser() {
		return this.user;
	}

	/**
	 * Sets the user.
	 * 
	 * @param user
	 *            the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	@Column(name = "name", unique = true, nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 * 
	 * @param name
	 *            the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the manufaturer.
	 * 
	 * @return the manufaturer
	 */
	@Column(name = "manufaturer", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getManufaturer() {
		return this.manufaturer;
	}

	/**
	 * Sets the manufaturer.
	 * 
	 * @param manufaturer
	 *            the new manufaturer
	 */
	public void setManufaturer(String manufaturer) {
		this.manufaturer = manufaturer;
	}

	/**
	 * Gets the virtual machine name.
	 * 
	 * @return the virtual machine name
	 */
	@Column(name = "virtual_machine_name", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getVirtualMachineName() {
		return this.virtualMachineName;
	}

	/**
	 * Sets the virtual machine name.
	 * 
	 * @param virtualMachineName
	 *            the new virtual machine name
	 */
	public void setVirtualMachineName(String virtualMachineName) {
		this.virtualMachineName = virtualMachineName;
	}

	/**
	 * Gets the memory size.
	 * 
	 * @return the memory size
	 */
	@Column(name = "memory_size", nullable = false)
	public Integer getMemorySize() {
		return this.memorySize;
	}

	/**
	 * Sets the memory size.
	 * 
	 * @param memorySize
	 *            the new memory size
	 */
	public void setMemorySize(Integer memorySize) {
		this.memorySize = memorySize;
	}

	/**
	 * Gets the processor frequency.
	 * 
	 * @return the processor frequency
	 */
	@Column(name = "processor_frequency", nullable = false)
	public Integer getProcessorFrequency() {
		return this.processorFrequency;
	}

	/**
	 * Sets the processor frequency.
	 * 
	 * @param processorFrequency
	 *            the new processor frequency
	 */
	public void setProcessorFrequency(Integer processorFrequency) {
		this.processorFrequency = processorFrequency;
	}

	/**
	 * Gets the battery type.
	 * 
	 * @return the battery type
	 */
	@Column(name = "battery_type", nullable = false, length = 45)
	@NotNull
	@Length(max = 45)
	public String getBatteryType() {
		return this.batteryType;
	}

	/**
	 * Sets the battery type.
	 * 
	 * @param batteryType
	 *            the new battery type
	 */
	public void setBatteryType(String batteryType) {
		this.batteryType = batteryType;
	}

	/**
	 * Gets the additional info.
	 * 
	 * @return the additional info
	 */
	@Column(name = "additional_info", length = 45)
	@Length(max = 45)
	public String getAdditionalInfo() {
		return this.additionalInfo;
	}

	/**
	 * Sets the additional info.
	 * 
	 * @param additionalInfo
	 *            the new additional info
	 */
	public void setAdditionalInfo(String additionalInfo) {
		this.additionalInfo = additionalInfo;
	}

	/**
	 * Gets the samples.
	 * 
	 * @return the samples
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device")
	public Set<Sample> getSamples() {
		return this.samples;
	}

	/**
	 * Sets the samples.
	 * 
	 * @param samples
	 *            the new samples
	 */
	public void setSamples(Set<Sample> samples) {
		this.samples = samples;
	}

	/**
	 * Gets the sampleconsumptions.
	 * 
	 * @return the sampleconsumptions
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "device")
	public Set<SampleConsumption> getSampleconsumptions() {
		return this.sampleconsumptions;
	}

	/**
	 * Sets the sampleconsumptions.
	 * 
	 * @param sampleconsumptions
	 *            the new sampleconsumptions
	 */
	public void setSampleconsumptions(Set<SampleConsumption> sampleconsumptions) {
		this.sampleconsumptions = sampleconsumptions;
	}

}
