package br.ufc.meadds.entity;

// Generated 01/06/2011 09:36:02 by Hibernate Tools 3.4.0.CR1

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.validator.NotNull;

// TODO: Auto-generated Javadoc
/**
 * Sampleconsumption generated by hbm2java.
 */
@Entity
@Table(name = "sample_consumption")
public class SampleConsumption implements Serializable {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = -7265067511398786902L;

	/** The id. */
	private Long id;

	/** The algorithm. */
	private Algorithm algorithm;

	/** The device. */
	private Device device;

	/** The user. */
	private User user;

	/** The date. */
	private Date date;

	/** The average consumption encrypt. */
	private Double averageConsumptionEncrypt;

	/** The average consumption decrypt. */
	private Double averageConsumptionDecrypt;

	/** The encryption rounds. */
	private Integer encryptionRounds;

	/** The decryption rounds. */
	private Integer decryptionRounds;

	/**
	 * Instantiates a new sample consumption.
	 */
	public SampleConsumption() {
	}

	/**
	 * Instantiates a new sample consumption.
	 * 
	 * @param idSampleConsumption
	 *            the id sample consumption
	 * @param algorithm
	 *            the algorithm
	 * @param device
	 *            the device
	 * @param user
	 *            the user
	 * @param date
	 *            the date
	 * @param averageConsumptionEncrypt
	 *            the average consumption encrypt
	 * @param averageConsumptionDecrypt
	 *            the average consumption decrypt
	 * @param roundsEncrypt
	 *            the rounds encrypt
	 * @param roundsDecrypt
	 *            the rounds decrypt
	 */
	public SampleConsumption(Long idSampleConsumption, Algorithm algorithm,
			Device device, User user, Date date,
			Double averageConsumptionEncrypt, Double averageConsumptionDecrypt,
			Integer roundsEncrypt, Integer roundsDecrypt) {
		this.id = idSampleConsumption;
		this.algorithm = algorithm;
		this.device = device;
		this.user = user;
		this.date = date;
		this.averageConsumptionEncrypt = averageConsumptionEncrypt;
		this.averageConsumptionDecrypt = averageConsumptionDecrypt;
		this.encryptionRounds = roundsEncrypt;
		this.decryptionRounds = roundsDecrypt;
	}

	/**
	 * Gets the id.
	 * 
	 * @return the id
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	/**
	 * Sets the id.
	 * 
	 * @param id
	 *            the new id
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * Gets the algorithm.
	 * 
	 * @return the algorithm
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "algorithm_id", nullable = false)
	@NotNull
	public Algorithm getAlgorithm() {
		return this.algorithm;
	}

	/**
	 * Sets the algorithm.
	 * 
	 * @param algorithm
	 *            the new algorithm
	 */
	public void setAlgorithm(Algorithm algorithm) {
		this.algorithm = algorithm;
	}

	/**
	 * Gets the device.
	 * 
	 * @return the device
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "device_id", nullable = false)
	@NotNull
	public Device getDevice() {
		return this.device;
	}

	/**
	 * Sets the device.
	 * 
	 * @param device
	 *            the new device
	 */
	public void setDevice(Device device) {
		this.device = device;
	}

	/**
	 * Gets the user.
	 * 
	 * @return the user
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = false)
	@NotNull
	public User getUser() {
		return this.user;
	}

	/**
	 * Sets the user.
	 * 
	 * @param user
	 *            the new user
	 */
	public void setUser(User user) {
		this.user = user;
	}

	/**
	 * Gets the date.
	 * 
	 * @return the date
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date", nullable = false, length = 19)
	@NotNull
	public Date getDate() {
		return this.date;
	}

	/**
	 * Sets the date.
	 * 
	 * @param date
	 *            the new date
	 */
	public void setDate(Date date) {
		this.date = date;
	}

	/**
	 * Gets the average consumption encrypt.
	 * 
	 * @return the average consumption encrypt
	 */
	@Column(name = "avg_encrypt_consumption", nullable = false, precision = 12, scale = 0)
	public Double getAverageConsumptionEncrypt() {
		return this.averageConsumptionEncrypt;
	}

	/**
	 * Sets the average consumption encrypt.
	 * 
	 * @param averageConsumptionEncrypt
	 *            the new average consumption encrypt
	 */
	public void setAverageConsumptionEncrypt(Double averageConsumptionEncrypt) {
		this.averageConsumptionEncrypt = averageConsumptionEncrypt;
	}

	/**
	 * Gets the average consumption decrypt.
	 * 
	 * @return the average consumption decrypt
	 */
	@Column(name = "avg_decrypt_consumption", nullable = false, precision = 12, scale = 0)
	public Double getAverageConsumptionDecrypt() {
		return this.averageConsumptionDecrypt;
	}

	/**
	 * Sets the average consumption decrypt.
	 * 
	 * @param averageConsumptionDecrypt
	 *            the new average consumption decrypt
	 */
	public void setAverageConsumptionDecrypt(Double averageConsumptionDecrypt) {
		this.averageConsumptionDecrypt = averageConsumptionDecrypt;
	}

	/**
	 * Gets the encryption rounds.
	 * 
	 * @return the encryption rounds
	 */
	@Column(name = "encrypt_rounds", nullable = false)
	public Integer getEncryptionRounds() {
		return this.encryptionRounds;
	}

	/**
	 * Sets the encryption rounds.
	 * 
	 * @param roundsEncrypt
	 *            the new encryption rounds
	 */
	public void setEncryptionRounds(Integer roundsEncrypt) {
		this.encryptionRounds = roundsEncrypt;
	}

	/**
	 * Gets the decryption rounds.
	 * 
	 * @return the decryption rounds
	 */
	@Column(name = "decrypt_rounds", nullable = false)
	public Integer getDecryptionRounds() {
		return this.decryptionRounds;
	}

	/**
	 * Sets the decryption rounds.
	 * 
	 * @param roundsDecrypt
	 *            the new decryption rounds
	 */
	public void setDecryptionRounds(Integer roundsDecrypt) {
		this.decryptionRounds = roundsDecrypt;
	}

}
